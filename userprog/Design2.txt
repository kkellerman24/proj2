		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Chase McCormick
Jordan Martin
Kevin Kellerman

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ryantimwilson/Pintos-Project-2
https://github.com/Waqee/Pintos-Project-2 

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No new or changed data structures for argument passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Strtok_r() is used to iteratively process the file name with the delimiter “ “.
First, we allocate memory for the argument vector with a default size of 2.

Next we iterate through the filename. On each iteration we do the following:
- Stack pointer (esp) is subtracted by strlen(token)+1
- The argument vector at the location of argument count is set to the stack pointer
- The argument counter is incremented
- If the argument counter is greater than the argument vector size (default size of 2), we reallocate the argument vector to double its size
We finally copy the token to the esp

A null pointer is then set to the end of the argument vector (argv[argc] = 0)

Next we traverse the argument vector array in reverse order and push the char * on our created stack. 
This gives us the desired order of our arguments. After this loop, the address of the argument vector, 
the value of the argument counter, and a fake return address are pushed onto the stack. The argument vector 
is then freed before returning to ensure no leaks from it.

Inside of load(), a check is done if the stack is not set up correctly. If the stack is not set up correctly, the file is closed. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The difference between strtok and strtok_r is that the strtok_r is reentrant, or can be interrupted in the middle of execution. 
This means that it is threadsafe. Strtok relies on a pointer to remember where it was looking in the string, and so the reentrant
 version allows us to pass in the correct particular saved pointer. It's important for tokenizing to be threadsafe since threads
 may be interrupted at any time in Pintos.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Unix stops the user from passing bad arguments to the kernel. Secondly, this decreases overhead for the kernel as it has one less thing to worry about.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//In syscall.h:
struct child_process {
  int pid;    //process id
  int load;   //load status
  bool wait;  //whether the process is waiting
  bool exit;  //whether the process has exited
  int status; //exit status inherited from parent
  struct lock wait_lock;  //lock for waiting
  struct list_elem elem;  //list_elem for iteration
};
//Allows us to track child processes in the parent process’s list of child processes.
struct lock file_lock;
//Lock that prevents multiple files in same file directory from being manipulated at once.

//In syscall.c:
struct process_file {
  struct file *file;
  int fd;
  struct list_elem elem;
};
//Allows us to iterate through all of the files that are opened by a particular process to close them later.

//In thread.h:
struct list files;
//List of files opened by a process. Used to close files later.
int max_fd;
//Maximum file descriptor used by process, incremented for each open.
struct list child_list;
//List of child processes for a process. Used for synchronization.
tid_t parent;
//The parent of a process. Also used for synchronization.
struct child_process* cp;
//The pointer to the process’s child_process struct in the parent’s child_list
Struct file *self:
//Pointer to the file from which the process was opened

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Using the struct file_desc, file descriptors are mapped to open files. File descriptors are unique within a process
 and a list of file descriptors was maintained with the implementation of file_list for each thread. A file_desc element
 is added to the file_list with each open() call, and likewise removed with each close() call.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

In read, if we are reading from the standard input buffer, input_getc is called. Otherwise, a file system lock
 is acquired so we can use the file system function file_read to get the number of bytes, then we release the lock when we are done.

For write, if we are using standard output, putbuf is called. Otherwise, a file system lock is acquired so we
 can use the file system function file_write to write the first size bytes before the lock is released. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

An inspection of the page table is needed for each new allocation for a page if each ELF segment is only
 one byte in size. The max number of inspections in this case is 4,096. If the segment size for ELF is greater
 than the segment size in files, only one inspection is needed.

For two bytes, the greatest number of inspections would be 2 as its the number of bytes. The least is one.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait() calls upon process_wait(). Inside of process_wait() the following occurs:

The child process is grabbed, and if we don’t have one an error is present.
If the child process is set to true for wait, we can’t return to exit status.
While the child process is not set to exit, barrier is called as a means of thread synchronization.
Finally the status is set and the child process is removed.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The Stack Pointer’s address (esp’s address) is checked using a function called valid(). 
Valid() checks if esp is less than PHYSBASE and that its entry exists in the page directory. 

If valid returns false, the process is terminated. 
After retrieving a system call number, equivalent arguments are extracted and validated using valid(). 
If an argument is a pointer, valid is further called to check the location it points to. 

When a process exits or is terminated, process_exit() is called in which values are reset, and child list is freed. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

A new thread, created in thread_create, has a reference to the parent thread. This newly created thread executes the
 load function inside of start_process and sets the result of the load function to a boolean called success. This 
 success value is then used to set a boolean for child process to say if a child process load was a success. 
 A parent thread, after waking up on a false success, checks the load boolean. If it is false, exec returns with -1, 
 else it returns the tid of the newly created thread.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A lot of questions are being asked here, let’s separate them. First, each process has a child struct which contains 2 semaphores.

P calls wait(C) before C exits
The wait sema inside the child struct is downed. 

P calls wait(C) after C exits
When C exits the wait sema is upped consequently awakening P.

P terminates without waiting after C exits
C has updated the used and return values but P doesn’t use them. Instead it exits freeing the child list.

P terminates without waiting before C exits
When C prepares to exit, it checks to see if its P’s child_list is empty before it simply exits.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It seemed to be the most simple and understandable implementation that we were inspired by.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Our file descriptor is simply an integer that starts with 2 (allowing the OS to use 0 and 1 for standard input and output). 
It increments for each file opening and continues to increase until our process is terminated. The major advantage is that
 we have uniqueness for each file descriptor which helps to stop all race conditions as we have a lock on opening files. 
 The only disadvantage I can see is that we could potentially overflow the integer for a very large process that opens many files many times.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default identity mapping for tid_t to pid_t. This is because processes so far are single-threaded. 
The advantage of this is simplicity. While the disadvantage is that it doesn’t work for multi-threaded processes.
 In those cases, we would have to implement a global pid counter just like the file descriptor counter we implemented.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Jordan: I think this project was far too hard to be considered just one project. Without any sort of Pintos 
instruction or any help from online resources, this project would likely have been impossible for any beginning 
Operating System student which most of us are.

Kevin: This assignment probably needs additional help from TAs or alloted lecture time to aid the groups. It took a long time.

Chase: Just understanding what the initial implementation was doing took some time, then to build and test
 the new implementation took even more time on top of that. Additional resources would be helpful. 


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Jordan: shutdown_power_off is not in threads/init. Also, more details on pagedir would have been helpful. 
The project description mentions that you “may” want to use use some functions, but you definitely have to 
use some of the functions. I think providing that guidance would have made some of the syscall stuff much easier.

Chase: Working in syscall.c provided me the greatest insight. Understanding the page directory was a bit difficult. 

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Jordan: I think this course should be taught as a lecture and lab and that the things we accomplish in these projects 
should be mostly done in labs so that GTAs can really help answer the practical questions we all likely have about Pintos.
 It seems that the projects and lectures don’t really align at all.

Chase: If the parts of this project could somehow be split and focused on, it may go smoother. E.g. have sessions or lectures 
that more effectively address each point (argument passing, system calls, denying writes, etc.). Trying to tie all of it together
 in one project and hoping it all works may not be the most beneficial. 

>> Any other comments?

Jordan: No other comments.
